---
title: "Git, Github and Markdown"
subtitle: "Three Tools for Economists"
author: "[Junsok Huhh](https://github.com/anarinsk/lec_git-github-markdown/)"
date: "2022-07-29"
format: 
    revealjs:
        incremental: true   
        theme: black
        css: "index.css"
        transition: concave
        background-transition: fade
        smaller: false
        scrollable: true
        logo: ""
        footer: "KNU Summer Special Tutorial"
        #self-contained: true
---

# 시작하기에 앞서 

## 우선 이렇게 가정합니다! 

:::{ .nonincremental }

- [깃](https://gitforwindows.org/)을 설치했다. 
  - 맥을 쓰시면 별로도 설치하지 않아도 됩니다... 
- [깃허브](https://github.com/) 계정을 생성해 두었다. 
- [깃허브 데스크탑](https://desktop.github.com/)을 설치했다. 
- [VS Code](https://code.visualstudio.com/)를 설치했다. 
- [Quarto](https://quarto.org/)를 설치했다. 

:::

## 목적과 동기의 호응 {background-color="black" background-image="https://25.media.tumblr.com/fc175d258e3109a3fa0a038ef4e577a4/tumblr_mj8tdt5Qxn1rmhlw7o1_r1_500.gif" background-size="cover" background-repeat="center" background-opacity="0.5" class="center"}

"서로 뭘 하는지 목적을 맞춰야 뭐 하나라도 건질 수 있겠죠?"

## 오늘 튜토리얼을 하는 이유 

1. 연구자라면 git과 github에 관한 지식이 필수적인 시대 
2. 보다 편리한 (학술) 문서 작성과 유통을 위한 방법
3. (강사 개인) VCS와 스크립트 랭귀지를 다루는 기쁨을 맛보시기를... 

## 오늘 튜토리얼의 목적 

1. Git이 왜 중요한지 알아보자. 
2. Github 계정을 만들고 최초의 `commit`, `push`, `pull`을 해보자.  
3. Markdown으로 문서를 작성해보자. 

## 좀 더 욕심을 내보자면...

:::{.nonincremental}
- Github 위에 블로그 만들기 
- 코드가 가미된 Markdown 문서 만들어보기 
:::

## 좀 더 욕심을 내보자면...{background-color="black" background-image="https://image.edaily.co.kr/images/photo/files/NP/S/2020/10/PS20101900203.jpg" background-size="cover" background-repeat="none" background-opacity="0.3" transition="none" background-transition="zoom" transition-speed="slow"}

:::{.nonincremental}
- Github 위에 블로그 만들기 
- 코드가 가미된 Markdown 문서 만들어보기 
:::


# Why Git?


## It's Timeline {background-iframe="https://www.youtube.com/embed/VgxuSclbCjA" background-interactive='true'}


## History {.smaller}

:::: {.columns}

::: {.column width="40%"}
![&nbsp;&nbsp;Linus Torvalds](http://students.washington.edu/kevint02/linus.jpeg) 
:::

::: {.column width="60%"}
::: {.nonincremental}
- Git은 리눅스의 개발 과정에서 탄생했다. 
  - Open Source의 특성상 개발 이력 관리가 필요 
  - 이른바 VCS를 (의도하지 않게) 혁신 
- VCS란? 
  - Version Control System 
  - Git이 없었다면 리눅스도 없었다! 
- 협업의 기술적 기초 
  - 좋은 도구는 협업의 효율성과 가능성을 넓힌다. 
  - Git은 현재 표준적인 협업 도구 
:::
:::

::::

## Git이란?

:::{.nonincremental}
- 한마디로 말하면 VCS이다. 
- 누가 무엇을 언제 바꾸었는지를 일목요연하게 기록한다. 
- 필요한 시점으로 언제든 돌아갈 수 있다(백업). 
:::

## 잠깐! {.smaller}

:::{.nonincremental}
- 우리는 지금 git을 본격적으로 배우는 것이 아니다... 
  - 따라서 이 특강에서는 1인 사용자만을 가정
- 1인일 때도 쓸모가 있을까? 
  - 나는 어제 뭐했는지도 정확하게 기억하지 못한다... 
  - Git + Github는 나의 어리석음을 보완해준다. 
- 웹하드와 유사한 것일까?  
  - Half Yes; 파일을 저장
  - Half No; 대용량 파일 저장 불가 
- 코드/문서를 관리하고 정리하는 용도
  - 1인 이용시, 기기 간 이동 작업에 편리 
  - 협업 시, 버전 관리의 자동화 
- Github의 경우 
  - 뒤에서 보겠지만, 개발자/연구자에게 유용한 부가 기능 제공 
:::

# Basics of Git{background-color="black" background-image="https://git-scm.com/images/logos/downloads/Git-Logo-White.png" background-size="cover" background-repeat="center" background-opacity="0.2" class="center"}

## Add, Commit, Push, Pull

![](https://velog.velcdn.com/images/chlwnstjr94/post/a9e014c5-97c7-473a-aa3e-dcc3bd4e99e5/image.PNG){.absolute top=120 left=80 width=800 height=550}

## 여러분의 버전 관리는 아마도...?

<br>

::: {.r-stack}
![](https://heekangpark.github.io/assets/img/git/vcs-hell.png){.fragment width="400" height="500"}

![](https://velog.velcdn.com/images/dumibell/post/66b3f899-7c42-4b9a-8411-568f45231fdd/image.png){.fragment width="900" height="250"}

![](https://backlog.com/git-tutorial/kr/img/post/intro/capture_intro1_1_1.png){.fragment width="600" height="300"}

:::

## Add & Commit 

![](./images/git-add-commit.png){.absolute top=150 left=100 width=900 height=500 style="background:#FFFFFF;"}

## Add & Commit 

- `Working Directory` 
  - 무슨 일이든 해도 좋다! 

- `Staging Area`
  - 저장이 필요한 수정/추가된 파일의 목록을 만들어 둔다. 

- `Commit` 
  - Staging Area의 내용을 모아서 스냅샷을 만든다. 

## 연습: 준비물 

:::{.nonincremental}
- Git (for Windows)
- Github Desktop (계정 만들어 두셨쥬?)
:::

## Git 폴더 만들기 

:::{.nonincremental}

- Git 폴더를 만드는 방법은 세 가지가 있습니다. 

  1. 애초부터 Git 폴더로 생성하기 
  2. Github에서 Clone 해오기 

:::

## Github Desktop

::: {.r-stack}
![](./images/github-desktop_1.png){.fragment width="850" height="550"}

![](./images/github-desktop_2.png){.fragment width="850" height="550"}

![](./images/github-desktop_3.png){.fragment width="850" height="550"}
:::


## Add & Commit 이해하기 

:::{.nonincremental}

- `Add`는 커밋할 상태로 파일을 올려두는 것을 의미합니다. 
- `Commit`은 (임시) 저장이라고 이해하면 편합니다. 
- `Commit`을 해두면 그 이전 상태로 언제든지 돌아갈 수 있습니다. 
  - 단, Github Desktop 앱을 통해서는 아닙니다... 
  - 터미널 혹은 [SourceTree](https://www.sourcetreeapp.com)를 쓰면 자유롭게 활용할 수 있습니다. 

:::

## 두려워 마세요! {background-color="black" background-image="https://c.tenor.com/_Vjz-KB-sj4AAAAC/lego-panic.gif" background-size="contain" background-repeat="center" background-opacity="0.3" class="center"}

"그냥 파일 시스템일 뿐입니다. 복붙에서 저장해 두면 되요."

## 깃 (더) 배우기 

:::{.nonincremental}
- <https://backlog.com/git-tutorial/kr>
- [subicura/git](https://subicura.com/git/guide/#git%E1%84%8B%E1%85%B4-%E1%84%83%E1%85%A1%E1%86%AB%E1%84%8C%E1%85%A5%E1%86%B7)
- <https://opentutorials.org/course/2708>
:::

## Branch 

![](https://www.nobledesktop.com/image/gitresources/git-branches-merge.png){.absolute top=100 left=100 width=800 height=500 style="background:#FFFFFF;"}

## Git과 Github의 역할  

:::{.nonincremental}
- 무궁무진할 정도로 다양합니다. 
- Github는 공통작업을 기본으로 합니다. 
:::

# {background-color="white" background-image="https://miro.medium.com/max/4000/1*J8O2xd9ZqxWr2x6EP4MHmg.png" background-size="contain" background-repeat="center" background-opacity="1" class="center"}

## Github는 원격 저장소 {.smaller}

::: { .nonincremental }
<https://github.com>

- 작업한 내용을 온라인을 통해 동기화 
  - 일종의 원격 저장소 
- 1인용; 서로 다른 기기로 작업할 때 유용 
  - PC 1 작업 &rarr; Git Push  &rarr; PC2 Git Pull  &rarr; 작업 &rarr; Git Push  &rarr;  PC 3 GIt Pull &rarr; $\cdots$
- 다인용; 프로젝트의 일관성 유지 및 관리  
  - Branch, Pull Request, Fork 등의 개념이 필요 
  - 익숙하지 않을 뿐 그렇게 어려운 개념은 아닙니다. 
- 2018년 마이크로소프트에서 인수 
  - 개인 및 소규모 개발사의 기본적인 기능은 무료 
:::

## {background-color="black" background-image="./images/Git-PUSH-pULL-1280x640.png" background-size="contain" background-repeat="none" background-opacity="1" transition="none" background-transition="zoom" transition-speed="slow"}

## Other Services in Github

:::{.nonincremental}

- Github Pages 
  - 정적 웹 호스팅 서비스 
- Github Actions 
  - 자동화 서비스 
- Github Copilot 
  - AI(GPT-3) 기반 코드 작성 보고 
<br>
$\vdots$

:::


## {background-color="black" background-image="./images/git_procedure_V2.png" background-size="contain" background-repeat="none" background-opacity="1" transition="none" background-transition="zoom" transition-speed="slow"}


# Markdown 

## 쉽고 효율적인 스크립트 문서 도구 

:::{.nonincremental}
- 구조화된 글쓰기 가능 
- $\rm \LaTeX$ 친화적 
- 다른 문서 포맷으로 쉽게 바꿀 수 있다. 
- 코드(Python, R, etc)와 문서를 융합할 수 있다. 
- 깃헙의 기본 문서 포맷 
  - 깃헙 리포에서 제일 먼저 보게 되는 내용; `README.md`
  - 자신의 프로젝트를 알리는 문서 
:::

## 마크다운 기본 문법 

:::{.nonincremental}

:::{.callout-tip}
[기본 문법](https://quarto.org/docs/authoring/markdown-basics.html)
:::

- 모든 마크다운 문법이 동일하지는 않다. 
  - [Github-flavored markdown](https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax), Kramdown 등등 
- 기본 문법은 동일하니 기본적인 부분을 파악해두면 된다. 
  - 서비스 별로 특화된 부분은 개별적으로 활용하면 됨 
:::

## 연습: 준비물 

:::{.nonincremental}
- VS Code 
  - "Makrdown All in One" 확장 설치 
- <https://stackedit.io/app#>
:::

# Github Pages + Markdown 

## Github Pages 

:::{.nonincremental}

<https://docs.github.com/en/pages>

- Github의 가장 좋은 기능 
- (공짜로) 복잡한 서버 세팅 없이 웹 페이지를 호스팅해준다. 
- 복잡한 웹 서버는 아니다. 
  - Static Web을 지원 
  - 이미 렌더링된 페이지를 노출한다. 

:::

## 작업 흐름

:::{.nonincremental}

- local(your PC)에서 도구를 사용해서 페이지 렌더링 
- 렌더링된 페이지를 Github으로 push 
- Github Pages가 스태틱웹의 형태로 페이지를 호스팅 

:::

## Pros & Cons

:::: {.columns}

::: {.column width="50%"}
::: {.nonincremental}
- 장점 
  - 플랫폼 종속성 최소화 
  - 깔끔하게 공간을 꾸밀 수 있다. 
  - $\rm \LaTeX$ 친화적 
  - (암묵적) 비용이 들지 않는다. 
:::
:::
::: {.column width="50%"}
::: {.nonincremental}
- 단점 
  - WYSIWYM을 활용할 수 있다.  
  - 진입 장벽 
  - 디자인 요소가 부족하다. 
  - 전달/전파가 용이하다. 
:::
:::

::::

## {background-color="white" background-image="./images/github-pages-workflow.png" background-size="contain" background-repeat="center" background-opacity="1" class="center"}

## 무엇을 할 수 있나? 

:::{.nonincremental}
- 단순 웹 페이지 
- 프로젝트 웹 페이지 
- 책 
- 블로그 
:::

## 연습: 준비물

:::{.nonincremental}
- `Quarto` 
- `VS Code` 
  - Quarto Extension 
:::


## Step by Step 

:::{.nonincremental}
- Github Pages를 활용할 예정
- Github Desktop 앱으로 적당한 Git 폴더 생성

<https://quarto.org/docs/websites/website-blog.html>
:::





